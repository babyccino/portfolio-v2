---
interface Props {
  text: string
  delay?: number
  class?: string
}

const { text, delay } = Astro.props
---

<div class="hero-container">
  <span style={`animation-delay: ${delay}ms;`} class="layer1">{text}</span>
  <span style={`animation-delay: ${delay}ms;`} class="layer2">{text}</span>
  <h2 class="hero glitch layers" data-text={text}>
    <span style={`animation-delay: ${delay}ms;`}>{text}</span>
  </h2>
</div>

<style lang="scss">
  .hero {
    margin: 0;
    line-height: 1;
    display: inline-block;
    color: #fff;
    z-index: 2;
    position: relative;
  }

  .demo {
    height: 100px;
    background: #fff;
  }

  .layers {
    position: relative;
  }

  .layer1,
  .layer2 {
    position: absolute;
    width: 110%;
    z-index: -1;
  }

  .layer1 {
    top: 10px;
    left: 15px;
    color: #e0287d;
    opacity: 0;
  }

  .layer2 {
    top: 5px;
    left: -10px;
    color: #1bc7fb;
    opacity: 0;
  }

  $baseAnimationLength: 6s;
  $iterationCount: 0.3;
  .glitch span {
    animation: paths ((1/2) * $baseAnimationLength) step-end (2 * $iterationCount) normal backwards;
  }

  .layer1 {
    animation:
      paths ((1/2) * $baseAnimationLength) step-end (2 * $iterationCount) normal backwards,
      opacity ((1/2) * $baseAnimationLength) step-end (2 * $iterationCount) normal backwards,
      font ((4/5) * $baseAnimationLength) step-end ((5/4) * $iterationCount) normal backwards,
      movement $baseAnimationLength step-end $iterationCount normal backwards;
  }

  .layer2 {
    animation:
      paths ((1/2) * $baseAnimationLength) step-end (2 * $iterationCount) normal backwards,
      opacity ((1/2) * $baseAnimationLength) step-end (2 * $iterationCount) normal backwards,
      font ((7/10) * $baseAnimationLength) step-end ((10/7) * $iterationCount) normal backwards,
      movement ((4/5) * $baseAnimationLength) step-end ((5/4) * $iterationCount) normal backwards;
  }

  .hero-container {
    position: relative;
  }
</style>
