---

---

<canvas id="three" class="fixed inset-0 overflow-hidden"> </canvas>

<script>
  import BlockWave from "../lib/block-wave"

  const prefersReducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)").matches
  if (!prefersReducedMotion) {
    const canvas = document.getElementById("three") as HTMLCanvasElement
    const fun = new BlockWave(canvas)
    fun.animate()
    document.addEventListener(
      "astro:page-load",
      () => {
        // This only runs once. hack to get around astro view transition bugs with classes
        const canvas = document.getElementById("three") as HTMLCanvasElement
        canvas.classList.add("fade-in")
        setTimeout(() => {
          canvas.classList.remove("fade-in")
        }, 4000)
      },
      { once: true },
    )

    function scrollPercentage(element: Element) {
      const rect = element.getBoundingClientRect()
      const percentage = element.scrollTop / (element.scrollHeight - rect.height)
      return Math.max(0, Math.min(1, percentage))
    }

    function throttle<T extends any[]>(func: (...args: T) => void, limit: number) {
      let inThrottle = false
      return function (...args: T) {
        if (inThrottle) {
          return
        }

        func(...args)
        inThrottle = true
        setTimeout(() => (inThrottle = false), limit)
      }
    }

    function monitorElementScroll(element: Element, callback: (arg0: number) => void) {
      const throttledCallback = throttle(() => {
        const percentage = scrollPercentage(element)
        callback(percentage)
      }, 16)

      element.addEventListener("scroll", throttledCallback)
      element.addEventListener("resize", throttledCallback)

      // Return cleanup function
      return () => {
        element.removeEventListener("scroll", throttledCallback)
        element.removeEventListener("resize", throttledCallback)
      }
    }

    const main = document.getElementById("main")
    if (main) {
      const cleanup = monitorElementScroll(main, percentage => {
        fun.setColourTarget(percentage)
      })

      // Clean up when done
      // cleanup();
    }
  }
</script>

<script is:inline>
  const canvas = document.getElementById("three")
  canvas.classList.add("fade-in")
</script>

<style lang="scss">
  .fade-in {
    opacity: 0;
    animation: fade-in 2s ease-in-out 2s forwards;
  }

  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>
