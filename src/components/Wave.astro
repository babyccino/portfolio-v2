---

---

<div id="pixi-container" class="fixed inset-0 -z-10"></div>

<script>
  import { Application, Text, Graphics, TextStyle } from "pixi.js"

  const app = new Application({
    backgroundAlpha: 0,
    resizeTo: window,
    // useContextAlpha: false,
    antialias: false,
  })

  // @ts-ignore
  document.querySelector("#pixi-container")?.appendChild(app.view)

  const asciiMap = " .:-+*=%@#"
  const getAscii = (val: number) => {
    val = Math.min(1, Math.max(0, val))
    const idx = Math.floor(val * asciiMap.length)
    return asciiMap[idx]
  }

  let viewWidth = app.view.width
  let viewHeight = app.view.height

  const acousticHeight = 200
  let viewToAcousticScale = acousticHeight / viewHeight
  let acousticWidth = Math.floor(viewToAcousticScale * viewWidth)

  const characterHeight = 15
  let textYCount = Math.floor(viewHeight / characterHeight)
  const characterWidth = 10
  let textXCount = Math.floor(viewWidth / characterWidth)

  let buffer1 = new Array(acousticWidth * acousticHeight).fill(0)
  let buffer2 = new Array(acousticWidth * acousticHeight).fill(0)

  // document.onresize()

  const textStyle = new TextStyle({
    fontFamily: "monospace",
    fontSize: 12,
    fill: "#bbbbbb",
  })
  function initTextArray() {
    const textArray = new Array<Text>(textXCount * textYCount)
    for (let i = 0; i < textXCount * textYCount; ++i) {
      const x = (i % textXCount) * characterWidth
      const y = Math.floor(i / textXCount) * characterHeight
      const text = new Text("@", textStyle)

      text.x = x
      text.y = y
      textArray[i] = text
      app.stage.addChild(text)
    }
    return textArray
  }
  const textArray = initTextArray()

  function generateSquarePulse(size: number, x: number, y: number) {
    for (let i = 0; i < size * size; ++i) {
      const idx = x + (i % size)
      const idy = y + Math.floor(i / size)
      buffer1[idx + idy * acousticWidth] = 1
    }
  }

  let clicked = false
  document.onpointerdown = e => {
    const x = Math.floor((e.clientX * acousticWidth) / viewWidth)
    const y = Math.floor((e.clientY * acousticHeight) / viewHeight)
    if (x <= 1 || y <= 1) return
    generateSquarePulse(3, x, y)
    clicked = true
  }
  document.onpointermove = e => {
    if (!clicked) return
    const x = Math.floor((e.clientX * acousticWidth) / viewWidth)
    const y = Math.floor((e.clientY * acousticHeight) / viewHeight)
    if (x <= 1 || y <= 1) return
    generateSquarePulse(3, x, y)
  }
  document.onpointerup = e => (clicked = false)
  document.onpointerleave = e => (clicked = false)

  const damping = 0.95

  const update = () => {
    for (let i = acousticWidth; i < acousticWidth * acousticHeight - acousticWidth; ++i) {
      const idx = i - acousticWidth
      const idy = i + acousticWidth
      const idl = i - 1
      const idr = i + 1

      buffer2[i] = (buffer1[idx] + buffer1[idy] + buffer1[idl] + buffer1[idr]) / 2 - buffer2[i]

      buffer2[i] *= damping
    }

    const tmp = buffer1
    buffer1 = buffer2
    buffer2 = tmp
  }

  const acousticToTextYScale = acousticHeight / textYCount
  const acousticToTextXScale = acousticWidth / textXCount
  const drawText = () => {
    for (let i = 0; i < textYCount * textXCount; ++i) {
      const x = i % textXCount
      const y = Math.floor(i / textXCount)
      const scaledX = Math.floor(x * acousticToTextXScale)
      const scaledY = Math.floor(y * acousticToTextYScale)
      const idx = Math.floor(scaledY * acousticWidth + scaledX)
      const val = buffer1[idx]
      const text = getAscii(val)
      textArray[i].text = text
    }
  }

  const graphics = new Graphics()
  const drawCircle = () => {
    for (let i = 0; i < acousticWidth * acousticHeight; ++i) {
      const x = Math.floor((i % acousticWidth) / viewToAcousticScale)
      const y = Math.floor(i / acousticWidth / viewToAcousticScale)
      const val = buffer1[i]
      graphics.lineStyle(0) // draw a circle, set the lineStyle to zero so the circle doesn't have an outline
      graphics.beginFill(0xff0000, val)
      graphics.drawCircle(x, y, 3)
      graphics.endFill()
    }
  }

  // app.stage.addChild(thing)
  let skip = false
  app.ticker.add(() => {
    if (skip) {
      skip = false
      return
    }
    update()
    graphics.clear()
    drawText()
    skip = true
  })
</script>
