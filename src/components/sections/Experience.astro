---
import { getCollection } from "astro:content"
import { Icon } from "astro-icon/components"

import { formatDate } from "../../lib/date"

const collection = await getCollection("experience")
const experience = await Promise.all(
  collection.map(async entry => ({
    ...entry,
    content: await entry.render(),
  })),
)
experience.sort((a, b) => {
  return new Date(b.data.started).getTime() - new Date(a.data.started).getTime()
})
---

<section>
  <ul class="group space-y-4">
    {
      experience.map(entry => (
        <li class="relative rounded-xl p-4 text-gray-800 transition duration-100 hover:bg-slate-400 hover:bg-opacity-15 hover:!opacity-100 group-hover:opacity-60 dark:text-gray-400">
          <a class="group/inner block text-sm" href={entry.data.link}>
            <div class="space-x-2 transition duration-100">
              <h3 class="inline text-base text-gray-900 dark:text-gray-200">{entry.data.title}</h3>
              <Icon
                class="-mt-1 inline size-5 transition duration-100 group-hover/inner:text-gray-500 dark:text-gray-500 dark:group-hover/inner:text-gray-500 sm:text-gray-400 sm:dark:text-gray-600"
                name="ion:open"
              />
            </div>
            <p class="mt-1 font-medium text-gray-600">
              {formatDate(entry.data.started)} - {formatDate(entry.data.ended)}
            </p>
            <div class="mt-1">
              <entry.content.Content />
            </div>
            <ul class="mt-2 flex flex-row flex-wrap gap-2 text-xs">
              {entry.data.technologies.map((tech: string) => (
                <li class="inline-block rounded-full bg-slate-400 bg-opacity-15 px-2 py-1">
                  {tech}
                </li>
              ))}
            </ul>
          </a>
        </li>
      ))
    }
  </ul>
</section>
