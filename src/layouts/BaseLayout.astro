---
import { ViewTransitions } from "astro:transitions"
import { SEO } from "astro-seo"

import "../styles/sharedAnimations.scss"

interface Props {
  title: string
}

const { title } = Astro.props
---

<!doctype html>
<html
  transition:name="body"
  transition:animate="none"
  transition:persist
  class="w-full justify-center md:flex md:flex-row"
  lang="en"
>
  <head>
    <script is:inline>
      if (
        localStorage.getItem("color-theme") === "dark" ||
        (!("color-theme" in localStorage) &&
          window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        document.documentElement.classList.add("dark")
      } else {
        document.documentElement.classList.remove("dark")
      }
    </script>
    <meta charset="UTF-8" />
    <meta name="description" content="Gus's portfolio" />
    <meta name="viewport" content="width=device-width" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="generator" content={Astro.generator} />
    <SEO
      title="Gus Ryan | Portfolio"
      description="Come and check out my work!"
      openGraph={{
        basic: {
          title: "Gus Ryan | Portfolio",
          type: "image/webp",
          image: "/images/open-graph.webp",
        },
      }}
    />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body
    class="max-w-screen over flex w-full flex-row justify-center transition-none dark:bg-gray-950 dark:text-gray-50"
  >
    <slot />
    <style is:global lang="scss">
      html {
        font-family: nimbus-sans, "helvetica neue", system-ui, sans-serif;
        padding-left: calc(100vw - 100%);
      }
      code {
        font-family:
          Menlo,
          Monaco,
          Lucida Console,
          Liberation Mono,
          DejaVu Sans Mono,
          Bitstream Vera Sans Mono,
          Courier New,
          monospace;
      }

      ::-webkit-scrollbar {
        width: 8px;
      }
      ::-webkit-scrollbar-thumb {
        background: #555;
        border-radius: 20px;
      }
      ::-webkit-scrollbar-thumb:hover {
        background: #444;
      }

      .skip-main {
        left: -999px;
        position: absolute;
        top: auto;
        width: 1px;
        height: 1px;
        overflow: hidden;
        z-index: -999;
      }
      .skip-main:focus,
      .skip-main:active {
        color: #fff;
        background-color: #000;
        left: auto;
        top: auto;
        width: 30%;
        height: auto;
        overflow: auto;
        margin: 10px 35%;
        padding: 5px;
        border-radius: 15px;
        border: 4px solid yellow;
        text-align: center;
        font-size: 1.2em;
        z-index: 999;
      }

      .glitch-animation {
        animation: inNOut 2s linear 0s 2 normal none;
      }
      @keyframes inNOut {
        0% {
          opacity: 0%;
          left: -0.35rem;
        }
        45% {
          opacity: 0%;
        }
        46% {
          opacity: 50%;
        }
        49% {
          opacity: 50%;
        }
        50% {
          opacity: 0%;
          left: -0.35rem;
        }
        91% {
          opacity: 0%;
          left: -0.75rem;
        }
        92% {
          opacity: 50%;
          left: -0.75rem;
        }
        95% {
          left: -0.35rem;
        }
        100% {
          opacity: 50%;
          left: -0.35rem;
        }
      }

      .glitch-animation-2 {
        animation: glitch2 2s linear 1s 1 normal none;
      }
      @keyframes glitch2 {
        0% {
          opacity: 0;
        }
        43% {
          opacity: 0;
        }
        44% {
          opacity: 1;
        }
        49% {
          opacity: 1;
        }
        50% {
          opacity: 0;
        }
        91% {
          opacity: 0;
        }
        92% {
          opacity: 1;
        }
        100% {
          opacity: 1;
        }
      }

      .glitch-animation-3 {
        animation: glitch3 2s linear 1s 1 normal none;
      }
      @keyframes glitch3 {
        0% {
          opacity: 0;
        }
        93% {
          opacity: 0;
        }
        94% {
          opacity: 1;
        }
        100% {
          opacity: 1;
        }
      }

      $baseAnimationLength: 8s;
      $iterationCount: 0.3;

      $movementTranslateBase: 0.5%;
      @keyframes movementTranslate {
        0% {
          translate: 0 (-4 * $movementTranslateBase);
        }

        15% {
          translate: (2 * $movementTranslateBase) (2 * $movementTranslateBase);
        }

        60% {
          translate: $movementTranslateBase (-2 * $movementTranslateBase);
        }

        75% {
          translate: (-1 * $movementTranslateBase) (4 * $movementTranslateBase);
        }

        100% {
          translate: (2 * $movementTranslateBase) $movementTranslateBase;
        }
      }

      .glitch-1 {
        animation:
          paths (calc(1 / 2) * $baseAnimationLength) step-end (2 * $iterationCount) normal forwards,
          opacity (calc(1 / 2) * $baseAnimationLength) step-end (2 * $iterationCount) normal
            forwards,
          movementTranslate $baseAnimationLength step-end $iterationCount normal forwards;
      }

      .glitch-2 {
        animation:
          paths (calc(1 / 2) * $baseAnimationLength) step-end (2 * $iterationCount) normal forwards,
          opacity (calc(1 / 2) * $baseAnimationLength) step-end (2 * $iterationCount) normal
            forwards,
          movementTranslate (calc(4 / 5) * $baseAnimationLength) step-end
            (calc(5 / 4) * $iterationCount) normal forwards;
      }
    </style>
    <script>
      import { getDarkMode } from "../lib/dark"

      // On page load or when changing themes, best to add inline in `head` to avoid FOUC
      const setDarkMode = () =>
        getDarkMode()
          ? document.documentElement.classList.add("dark")
          : document.documentElement.classList.remove("dark")
      setDarkMode()
      document.addEventListener("astro:after-swap", () => {
        setDarkMode()
      })
    </script>
  </body>
</html>
