---
import DarkMode from "../components/DarkMode.astro"
import Link from "../components/Link.astro"
import Three from "../components/Three.astro"
import BaseLayout from "./BaseLayout.astro"

interface Props {
  title: string
}

const { title } = Astro.props
---

<BaseLayout title={title}>
  <a class="skip-main" href="#main" tabindex="0">Skip to main content</a>
  <div class="relative flex min-h-screen w-full max-w-5xl flex-col justify-between md:flex-row">
    <header
      transition:name="nav"
      transition:persist
      transition:animate="none"
      class="relative top-0 z-10 w-full p-8 pb-4 pl-12 pt-12 md:fixed md:top-1/2 md:w-80 md:-translate-y-1/2 md:pb-14 md:pt-0"
      id="nav"
    >
      <div class="relative cursor-default text-5xl font-light dark:text-gray-200">Gus Ryan</div>
      <h2 class="mt-4 cursor-default text-2xl font-light dark:text-gray-100">Web Developer</h2>
      <nav
        class="fixed left-6 top-1/2 z-10 -translate-y-1/2 pt-14 dark:text-gray-300 md:static md:mt-16 md:transform-none md:pt-0"
      >
        <ul class="space-y-8 text-base font-light tracking-wide text-gray-900 dark:text-gray-200">
          <li class="writing-vertical">
            <Link content="About" href="/about#about" />
          </li>
          <li class="writing-vertical">
            <Link content="Experience" href="/about#experience" />
          </li>
          <li class="writing-vertical">
            <Link content="Projects" href="/about#projects" />
          </li>
          <li class="writing-vertical">
            <Link content="Blog" href="/about#blog" />
          </li>
        </ul>
      </nav>
    </header>
    <div aria-hidden="true">
      <div class="md:w-80"></div>
    </div>
    <div class="relative grow overflow-hidden">
      <div id="main-container" class="h-full overflow-hidden">
        <slot />
      </div>
    </div>
  </div>
  <div id="dark-mode-container" class="fixed right-[5vh] top-[5vh] z-10">
    <div transition:persist transition:animate="fade" transition:name="dark-mode-toggle">
      <DarkMode />
    </div>
  </div>
  <div
    transition:name="three-canvas"
    transition:persist
    transition:animate="none"
    class="fixed inset-0 -z-20"
    aria-hidden="true"
  >
    <Three />
  </div>
</BaseLayout>

<script>
  import { glitchElement } from "../lib/glitch"

  function isElementInViewport(element: Element) {
    const rect = element.getBoundingClientRect()

    return (
      rect.top >= 0 &&
      rect.left >= 0 &&
      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
      rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    )
  }

  const darkModeContainer = document.getElementById("dark-mode-container") as HTMLDivElement
  darkModeContainer.className = "fixed right-[5vh] top-[5vh] z-10"

  setTimeout(() => glitchElement("nav"), 200)
  document.addEventListener("astro:page-load", () => {
    setTimeout(() => glitchElement("main-container"), 200)
  })

  const hashLinks = document.querySelectorAll('a[href^="/about#"]')

  let beforeLastIntersection: Element | null = null
  let lastIntersection: Element | null = null

  function setActive(link: Element) {
    for (const hashLink of hashLinks) {
      if (hashLink !== link) {
        hashLink.classList.add("decoration-transparent")
      }
    }

    link.classList.remove("decoration-transparent")
  }

  function getSectionForLink(element: Element) {
    const href = element.getAttribute("href")
    if (href == null) return
    const match = href.match(/#.*/i)
    if (match == null) return
    const targetId = match[0].substring(1)
    return document.getElementById(targetId)
  }

  function observerCb(entry: IntersectionObserverEntry) {
    const targetId = entry.target.id
    let link = document.querySelector(`a[href^="/about#${targetId}"]`)

    if (link == null) {
      console.warn("link not found")
      return
    }

    if (!entry.isIntersecting) {
      if (lastIntersection == null || beforeLastIntersection == null) {
        return
      }

      const section = getSectionForLink(beforeLastIntersection)
      if (section != null && isElementInViewport(section)) {
        setActive(beforeLastIntersection)
      }
    } else {
      if (lastIntersection !== link) {
        beforeLastIntersection = lastIntersection
      }
      lastIntersection = link
      setActive(link)
    }
  }

  const observer = new IntersectionObserver(
    entries => {
      entries.forEach(observerCb)
    },
    {
      threshold: 0.5,
    },
  )

  for (const link of hashLinks) {
    const targetElement = getSectionForLink(link)
    if (targetElement) {
      observer.observe(targetElement)
    }
  }
</script>

<style lang="scss">
  @media (max-width: 768px) {
    .writing-vertical {
      writing-mode: vertical-rl;
      text-orientation: mixed;
    }
  }
</style>
