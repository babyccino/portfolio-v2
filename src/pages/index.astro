---
import BaseLayout from "../layouts/BaseLayout.astro"
---

<BaseLayout title="Gus Ryan | Intro">
  <a
    id="portfolio-link"
    class="fixed bottom-[7vh] right-[7vh] z-10 text-lg"
    href="/about"
    data-astro-prefetch
    aria-label="skip animation, go to main page"
    tabindex="0"
  >
    skip
  </a>
  <div
    id="terminal-container"
    class="relative flex h-screen w-screen items-center justify-center overflow-hidden font-mono"
  >
    <div
      id="terminal"
      class="m-6 flex min-h-[70vh] w-[90vw] max-w-3xl flex-col break-all rounded-xl bg-gray-800 sm:min-h-96 sm:w-full"
    >
      <div
        class="relative rounded-xl rounded-b-none border border-gray-500 border-b-gray-950 bg-gray-700 py-1 text-center font-sans text-sm font-semibold text-gray-300"
      >
        <img
          src="/images/mac-folder.png"
          height="10"
          class="-mt-1 mr-1 inline-block h-5"
          alt="mac folder icon"
        />gusryan - zsh - 180x47
        <div class="absolute left-2 top-0 flex h-full flex-row items-center gap-2">
          <div class="h-[13px] w-[13px] rounded-full bg-red-500"></div>
          <div class="h-[13px] w-[13px] rounded-full bg-yellow-500"></div>
          <div class="h-[13px] w-[13px] rounded-full bg-green-500"></div>
        </div>
      </div>
      <div
        class="flex-1 rounded-xl rounded-t-none border border-t-0 border-gray-600 pl-1 pt-1 text-sm text-gray-50"
      >
        <p class="generate-glitch-text">
          Last login: {new Date(Date.now() - 1000 * 60 * 60 * 24).toDateString()} on ttys004
        </p>
        <div class="generate-glitch-text">
          <span> gusryan@Guss-MacBook-Air ~ %</span>
          <span id="curl"></span><span id="caret" class="bg-gray-400 text-gray-400">O</span>
        </div>
        <div class="flex flex-row justify-between">
          <pre class="generate-glitch-text" id="progress"></pre>
          <p id="percent"></p>
        </div>
        <p id="error"></p>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  import { prefetch } from "astro:prefetch"
  const floor = Math.floor.bind(Math)

  // get random int between min and max
  function getRandomInt(min: number, max: number) {
    return floor(Math.random() * (max - min + 1)) + min
  }

  function generateGlitchText(text: string, glitchChance = 0.5, glitchAmount = 10) {
    let glitchText = ""
    for (let i = 0; i < text.length; ++i) {
      glitchText += text.at(i)
      if (Math.random() < glitchChance) {
        for (let j = 0; j < glitchAmount; ++j) {
          glitchText += `&#${getRandomInt(768, 879)};`
        }
      }
    }

    return glitchText
  }

  const wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))
  const progressElement = document.getElementById("progress") as HTMLPreElement
  const caretElement = document.getElementById("caret") as HTMLSpanElement
  const percentElement = document.getElementById("percent") as HTMLSpanElement
  const errorElement = document.getElementById("error") as HTMLPreElement
  const terminalElement = document.getElementById("terminal") as HTMLPreElement
  async function animate() {
    await wait(4200)
    caretElement.classList.add("hidden")
    await wait(500)

    const weirdText = "#      #      #        #       #"
    const weirdText2 = "-=0=-"

    function combine(text: string) {
      let result = ""
      for (let i = 0; i < Math.max(text.length, weirdText2.length); ++i) {
        const char1 = text.at(i)
        const char2 = weirdText2.at(i)
        if (char1 === "#") result += char1
        else if (char2) result += char2
        else result += char1
      }
      return result
    }

    for (let i = 0; i < weirdText.length; i += 3) {
      progressElement.innerText = combine(weirdText.slice(weirdText.length - i - 1))
      await wait(100)
    }

    await wait(200)

    prefetch("/")

    progressElement.innerText = "#"
    const hashWidth = progressElement.clientWidth
    const charCount = Math.floor(terminalElement.clientWidth / hashWidth) - 10

    percentElement.innerText = `0%`

    for (let i = 0; i <= 99; ++i) {
      await wait(getRandomInt(20, 40))
      if (Math.random() > 0.8) {
        const count = floor((i * charCount) / 100)
        progressElement.innerText = new Array(count).fill("#").join("")
        percentElement.innerText = `${i}%`
      }
    }

    progressElement.innerText = new Array(charCount).fill("#").join("")
    percentElement.innerText = `99%`

    await wait(500)

    terminalElement.classList.add("cursor-wait")

    errorElement.innerHTML = "curl: (7) lost connection to gusryan.me: Data received is corrupted"

    await wait(1000)

    errorElement.innerHTML += "<br>corrupted"

    await wait(1000)

    errorElement.innerHTML += "<br>" + generateGlitchText("corrupted")

    await wait(1000)

    errorElement.innerHTML += "<br>" + generateGlitchText("corrupted", 0.6, 5)

    await wait(200)
    errorElement.innerHTML += "<br>" + generateGlitchText("corrupted", 0.6, 5)

    const terminalContainer = document.getElementById("terminal-container") as HTMLDivElement
    terminalContainer.classList.add("glitch")

    terminalElement.before(terminalElement.cloneNode(true))
    const terminalClone = terminalElement.previousSibling as HTMLDivElement
    terminalClone.classList.add("absolute", "hue-rotate-90", "-z-10")
    terminalClone.id = "terminal-clone-1"

    terminalElement.before(terminalElement.cloneNode(true))
    const terminalClone2 = terminalElement.previousSibling as HTMLDivElement
    terminalClone2.classList.add("absolute", "-hue-rotate-90", "-z-10")
    terminalClone2.id = "terminal-clone-2"

    await wait(200)
    errorElement.innerHTML += "<br>" + generateGlitchText("corrupted", 0.6, 5)
    await wait(200)
    errorElement.innerHTML += "<br>" + generateGlitchText("corrupted", 0.6, 5)

    await wait(1000)

    const glitchify = document.getElementsByClassName("generate-glitch-text")
    for (let i = 0; i < glitchify.length; ++i) {
      const item = glitchify.item(i)
      if (!item) continue
      item.innerHTML = generateGlitchText(item.innerHTML, 0.2, 4)
    }

    await wait(1000)

    terminalContainer.classList.remove("glitch")
    terminalContainer.classList.add("glitch-disappear")

    await wait(1000)
    document.getElementById("portfolio-link")?.click()
  }
  animate()
</script>

<style lang="scss">
  @import "../styles/typed.scss";

  #progress {
    overflow-wrap: break-word;
  }

  #portfolio-link {
    filter: drop-shadow(white 0 0 0.75rem);
    // animation: name duration timing-function delay iteration-count direction fill-mode;
    animation: skip 1.5s ease-in 0s infinite;
  }

  @keyframes skip {
    0%,
    100% {
      filter: drop-shadow(white 0 0 0.75rem);
    }
    50% {
      filter: drop-shadow(white 0 0 0.75rem) drop-shadow(rgba(255, 255, 255, 0.25) 0 0 0.5rem);
    }
  }

  #curl {
    @include typed(
      "crul -# -O ht",
      (
        type: 0.03,
        pause-typed: 0.2,
        delete: 0.04,
        pause-deleted: 0,
      ),
      (
        caret: false,
        iterations: 1,
        delay: 1.2,
        end-on: "curl -# -O site.html https://gusryan.me/about.html",
      )
    );
  }

  @keyframes enter {
    from {
      transform: scaleX(0.01);
      translate: 0 200%;
    }
    50% {
      transform: perspective(400px) rotateX(-40deg) scaleY(1) scaleX(0.3);
    }
    to {
      transform: none;
      translate: 0;
      filter: none;
    }
  }

  #terminal {
    transform: scaleX(0.01);
    translate: 0 200%;
    animation: enter 0.3s ease-out 0.2s 1 normal forwards;
  }

  .glitch #terminal,
  .glitch-disappear #terminal {
    transform: none;
    translate: none;
  }

  $animationTime: 1s;
  .glitch #terminal {
    animation: paths $animationTime * 3 step-end infinite normal backwards;
  }

  .glitch #terminal-clone-1 {
    animation:
      paths $animationTime * 3 step-end infinite normal backwards,
      opacity $animationTime * 3 step-end infinite normal backwards,
      movementTranslate 6 * $animationTime step-end infinite normal backwards;
  }

  .glitch #terminal-clone-2 {
    animation:
      paths 2 * $animationTime step-end infinite normal backwards,
      opacity 2 * $animationTime step-end infinite normal backwards,
      movementTranslate 5s step-end infinite normal backwards;
  }

  $glitch-disappear-time: 150ms;
  .glitch-disappear #terminal {
    animation:
      paths $glitch-disappear-time * 3 step-end infinite normal backwards,
      scale 6 * $glitch-disappear-time step-end 1 normal forwards;
  }

  .glitch-disappear #terminal-clone-1 {
    animation:
      paths $glitch-disappear-time * 3 step-end infinite normal backwards,
      opacity $glitch-disappear-time * 3 step-end infinite normal backwards,
      movementTranslate 6 * $glitch-disappear-time step-end infinite normal backwards,
      scale 6 * $glitch-disappear-time step-end 1 normal forwards;
  }

  .glitch-disappear #terminal-clone-2 {
    animation:
      paths 2 * $glitch-disappear-time step-end infinite normal backwards,
      opacity 2 * $glitch-disappear-time step-end infinite normal backwards,
      movementTranslate 5s step-end infinite normal backwards,
      scale 6 * $glitch-disappear-time step-end 1 normal forwards;
  }

  @keyframes scale {
    0% {
      scale: 1 1;
    }
    5% {
      scale: 0.8 1.2;
    }
    30% {
      scale: 1.3 0.4;
    }
    66% {
      scale: 0.7 0.3;
    }
    100% {
      scale: 0 0;
    }
  }
</style>
